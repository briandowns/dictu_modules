#!/usr/bin/env dictu

import Socket;
import System;


const MAX_BYTES = 1024,
      READ_BUFFER = 2048;

const SERVER_PORT = 67,
	  CLIENT_PORT = 68;

class DHCPServer {
    init(addr="0.0.0.0") {
        this.addr = addr;
    }

    start() {
        var res = Socket.create(Socket.AF_INET, Socket.SOCK_DGRAM);
        if (not res.success()) {
            return res.unwrapError();
        }
        this.socket = res.unwrap();
        
        res = this.socket.setsockopt(Socket.SOL_SOCKET, Socket.SO_REUSEADDR);
        if (not res.success()) {
            return res.unwrapError();
        }

        res = this.socket.setsockopt(Socket.SOL_SOCKET, Socket.SO_BROADCAST);
        if (not res.success()) {
            return res.unwrapError();
        }

        res = this.socket.bind(this.addr, SERVER_PORT);
        if (not res.success()) {
            return res.unwrapError();
        }

        res = this.socket.listen(SERVER_PORT);
        if (not res.success()) {
            return res.unwrapError();
        }

        var [client, address] = this.socket.accept().unwrap();

        while {
            res = client.recv(READ_BUFFER);
            if (not res.success()) {
                log.println(res.unwrapError());
                break;
            }

            const offer = this.encodeOffer();

            res = client.write(offer);
            if (not res.success()) {
                log.println(res.unwrapError());
                break;
            }
        }
    }

    stop() {
        this.socket.close();
    }

    private encodeOffer() {
        const OP = [0x02];
        const HTYPE = [0x01];
        const HLEN = [0x06];
        const HOPS = [0x00];
        const XID = [0x39, 0x03, 0xF3, 0x26];
        const SECS = [0x00, 0x00];
        const FLAGS = [0x00, 0x00];
        const CIADDR = [0x00, 0x00, 0x00, 0x00];
        const YIADDR = [0xC0, 0xA8, 0x01, 0x64]; // 192.168.1.100
        const SIADDR = [0xC0, 0xA8, 0x01, 0x01]; // 192.168.1.1
        const GIADDR = [0x00, 0x00, 0x00, 0x00];
        const CHADDR1 = [0x00, 0x05, 0x3C, 0x04];
        const CHADDR2 = [0x8D, 0x59, 0x00, 0x00];
        const CHADDR3 = [0x00, 0x00, 0x00, 0x00];
        const CHADDR4 = [0x00, 0x00, 0x00, 0x00];
        const CHADDR5 = [0xC0];
        const Magiccookie = [0x63, 0x82, 0x53, 0x63];
        const DHCPOptions1 = [53, 1, 2]; // DHCP Offer
        const DHCPOptions2 = [1, 4, 0xFF, 0xFF, 0xFF, 0x00]; // 255.255.255.0 subnet mask
        const DHCPOptions3 = [3, 4, 0xC0, 0xA8, 0x01, 0x01]; // 192.168.1.1 router
        const DHCPOptions4 = [51, 4, 0x00, 0x01, 0x51, 0x80]; // 86400s(1 day) IP address lease time
        const DHCPOptions5 = [54, 4, 0xC0, 0xA8, 0x01, 0x01]; // DHCP server
        
        const package = OP + HTYPE + HLEN + HOPS + XID + SECS + FLAGS + CIADDR +YIADDR + SIADDR + GIADDR + CHADDR1 + CHADDR2 + CHADDR3 + CHADDR4 + CHADDR5 + Magiccookie + DHCPOptions1 + DHCPOptions2 + DHCPOptions3 + DHCPOptions4 + DHCPOptions5;

        return package;
    }

    private encodeResponse() {
        const OP = bytes([0x02]);
        const HTYPE = bytes([0x01]);
        const HLEN = bytes([0x06]);
        const HOPS = bytes([0x00]);
        const XID = bytes([0x39, 0x03, 0xF3, 0x26]);
        const SECS = bytes([0x00, 0x00]);
        const FLAGS = bytes([0x00, 0x00]);
        const CIADDR = bytes([0x00, 0x00, 0x00, 0x00]);
        const YIADDR = bytes([0xC0, 0xA8, 0x01, 0x64]);
        const SIADDR = bytes([0xC0, 0xA8, 0x01, 0x01]);
        const GIADDR = bytes([0x00, 0x00, 0x00, 0x00]);
        const CHADDR1 = bytes([0x00, 0x05, 0x3C, 0x04]); 
        const CHADDR2 = bytes([0x8D, 0x59, 0x00, 0x00]);
        const CHADDR3 = bytes([0x00, 0x00, 0x00, 0x00]);
        const CHADDR4 = bytes([0x00, 0x00, 0x00, 0x00]); 
        const CHADDR5 = bytes(192);
        const Magiccookie = bytes([0x63, 0x82, 0x53, 0x63]);
        const DHCPOptions1 = bytes([53 , 1 , 5]); // DHCP ACK(value = 5)
        const DHCPOptions2 = bytes([1 , 4 , 0xFF, 0xFF, 0xFF, 0x00]); // 255.255.255.0 subnet mask
        const DHCPOptions3 = bytes([3 , 4 , 0xC0, 0xA8, 0x01, 0x01]); // 192.168.1.1 router
        const DHCPOptions4 = bytes([51 , 4 , 0x00, 0x01, 0x51, 0x80]); // 86400s(1 day) IP address lease time
        const DHCPOptions5 = bytes([54 , 4 , 0xC0, 0xA8, 0x01, 0x01]); // DHCP server
	
        const package = OP + HTYPE + HLEN + HOPS + XID + SECS + FLAGS + CIADDR +YIADDR + SIADDR + GIADDR + CHADDR1 + CHADDR2 + CHADDR3 + CHADDR4 + CHADDR5 + Magiccookie + DHCPOptions1 + DHCPOptions2 + DHCPOptions3 + DHCPOptions4 + DHCPOptions5;

        return package;
    }
}

{ // main
    const dhcpServer = DHCPServer();
    dhcpServer.start();

    System.sleep(10);

	System.exit(0);
}
