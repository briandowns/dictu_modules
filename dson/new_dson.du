import JSON;
import Object;
import System;


const annotationName = "Json";
const dictuTypes = ["number", "string", "set", "list", "dict"];

// Dson provides the ability to convert classes to JSON and 
// from JSON to a given class.
class Dson {
    init() {}

    parse(data) {}

    private processClass(klass) {
        const fields = klass.getAttributes()["fields"].filter(def(field) => field != "_name");
        const fieldAnnotations = klass._class.fieldAnnotations;

        var data = {};

        fields.forEach(def(field) => {
            const fieldValue = klass.getAttribute(field);
            const fieldType = type(fieldValue);
            var fieldName = "";

            if (klass._class.fieldAnnotations != nil and fieldAnnotations.exists(field)) {
                if (fieldAnnotations.get(field).exists(annotationName)) {
                    fieldName = fieldAnnotations[field].get(annotationName);
                }
            } else {
                fieldName = field;
            }

            if (dictuTypes.contains(fieldType)) {
                data[fieldName] = fieldValue;
            } else {
                data[fieldName] = this.processClass(fieldValue);
            }
        });

        return data;
    }

    stringify(klass) {
        const data = this.processClass(klass);
        return JSON.stringify(data);
    }
}

class Job {
    var title = "";
    var salary = 0;

    init() {}
}

class Person {
    @Json("first_name")
    var firstName = "";

    @Json("last_name")
    var lastName = "";

    var age = 0;
    var titles = [];
    var job = nil;

    init() {}
}

{ // main
    const dson = Dson();
    
    const job = Job();
    job.title = "Principal Software Engineer";
    job.salary = 10;

    const person = Person();
    person.firstName = "Brian";
    person.lastName = "Downs";
    person.age = 28;
    person.titles = ["Mr", "Dr", "MS"];
    person.job = job;

    print(dson.stringify(person).unwrap());

    System.exit(0);
}
