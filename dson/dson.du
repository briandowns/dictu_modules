// module dson is a Dictu module for JSON serialization and deserialization 
// focusing its functionality around classes.

import JSON;
import Object;
import System;


const annotationName = "Json",
      dictuTypes = [
        "number",
        "string",
        "set",
        "list",
        "dict"
    ];

// Dson provides the ability to convert classes to JSON and 
// from JSON to a given class.
class Dson {
    init() {}

    // classFields receives a class and returns a list of the 
    // fields of the class. Even if no fields have been defined
    // by the user, an empty list will be returned.
    private classFields(klass) {
        return klass
            .getAttributes()["fields"]
            .filter(def(field) => field != "_name");
    }

    // parse takes a string and a class instance, parses the string 
    // containing the JSON into a dictionary, and attempts to map
    // the fields to the given class with help from the class
    // annotations.
    parse(data, klass) {
        if (type(data) != "string") {
            return Error("data passed is not of type 'string'");
        }

        var res = Object.createFrom(klass._name);
        if (not res.success()) {
            return res;
        }
        res = res.unwrap();

        const parsed = JSON.parse(data);
        if (not parsed.success()) {
            return parsed;
        }

        const fields = this.classFields(klass);
        const fieldAnnotations = klass._class.fieldAnnotations;

        fields.forEach(def(field) => {
            var fieldName = "";

            if (klass._class.fieldAnnotations != nil and fieldAnnotations.exists(field)) {
                if (fieldAnnotations.get(field).exists(annotationName)) {
                    fieldName = fieldAnnotations[field].get(annotationName);
                    res.setAttribute(field, parsed.unwrap()[fieldName]);
                }
            } else {
                fieldName = field;
                res.setAttribute(fieldName, parsed.unwrap()[fieldName]);
            }
        });

        return Success(res);
    }

    // processClass takes a class, parses the fields and annotations, parses the fields and 
    // data info a dictionary and returns the results. If a field is determined to be a class,
    // processClass will be called recursively on that type with the results being returned 
    // and added to the top level dict.
    private processClass(klass) {
        const fields = this.classFields(klass);
        const fieldAnnotations = klass._class.fieldAnnotations;

        var data = {};

        fields.forEach(def(field) => {
            const fieldValue = klass.getAttribute(field);
            const fieldType = type(fieldValue);
            var fieldName = "";

            if (klass._class.fieldAnnotations != nil and fieldAnnotations.exists(field)) {
                if (fieldAnnotations.get(field).exists(annotationName)) {
                    fieldName = fieldAnnotations[field].get(annotationName);
                }
            } else {
                fieldName = field;
            }

            if (dictuTypes.contains(fieldType)) {
                data[fieldName] = fieldValue;
            } else {
                data[fieldName] = this.processClass(fieldValue);
            }
        });

        return data;
    }

    // stringify receives a class and returns a Result object
    // that unwraps to a JSON encoded string.
    stringify(klass) {
        const data = this.processClass(klass);
        return JSON.stringify(data);
    }
}
