import Hashlib;
import Random;
import System;


const lowerCaseChars = "abcdefghijklmnopqrstuvwxyz";
const upperCaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const numberChars = "0123456789";
const specialChars = "!@#$%^&*()-_=+,.?/:;{}[]~";
const characters = upperCaseChars + lowerCaseChars + numberChars + specialChars;

const wordsFile = "/usr/share/dict/words";

class Salt {
    init(var length) {}

    generate() {}
}

class Password {
    const sha256 = "sha256";
    const bcrypt = "bcrypt";

    private password;

    init() {
        this.password = "";
    }

    get() {
        return this.password;
    }

    set(password) {
        this.password = password;
    }

    generate(length, ...secure) {
        for (var i = 0; i < length; i += 1) {
            this.password += characters[Random.range(0, characters.len()-1)];
        }

        if (secure) {
            if (not this.isSecure()) {
                this.generate(length, true);
            }
        }

        return Success(nil);
    }

    hash(algorithm) {
        switch (algorithm.lower()) {
            case "sha256":
                return Hashlib.sha256(this.password);
            case "bcrypt":
                return Hashlib.bcrypt(this.password);
        }
    }

    isSecure() {
        if (this.password.len() < 12) {
            return Error("password less than 12 characters");
        }

        if (not this.hasNumber()) {
            return Error("missing number character");
        }

        if (not this.hasUpper()) {
            return Error("missing uppper case character");
        }

        if (not this.hasLower()) {
            return Error("missing uppper case character");
        }

        if (not this.hasSpecialChar()) {
            return Error("missing special character");
        }

        return Success(nil);
    }

    private hasNumber() {
        for (var i = 0; i < this.password.len(); i += 1) {
            const res = this.password[i].toNumber().match(
                def (result) => {return true;},
                def (error) => {return false;}
            );
            if (res) {
                return res;
            }
        }

        return false;
    }

    private hasUpper() {
        for (var i = 0; i < this.password.len(); i += 1) {
            if (upperCaseChars.contains(this.password[i])) {
                return true;
            }
        }

        return false;
    }

    private hasLower() {
        for (var i = 0; i < this.password.len(); i += 1) {
            if (lowerCaseChars.contains(this.password[i])) {
                return true;
            }
        }

        return false;
    }

    private hasSpecialChar() {
        for (var i = 0; i < this.password.len(); i += 1) {
            if (specialChars.contains(this.password[i])) {
                return true;
            }
        }

        return false;
    }
}

{ // main
    const pass = Password();
    //pass.generate(12);
    pass.set("Asdfasdfasdfasdf1!");
    const password = pass.get();

    // print(password);
    // print(pass.hash(pass.sha256));
    // print(pass.hash(pass.bcrypt));
    pass.isSecure().match(
        def(result) => {
            print("secure!");
            return;
        },
        def(error) => {
            print(error);
        }
    );

    System.exit(0);
}
