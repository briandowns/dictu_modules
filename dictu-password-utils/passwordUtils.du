import Hashlib;
import Random;


const lowerCaseChars = "abcdefghijklmnopqrstuvwxyz",
      upperCaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      numberChars = "0123456789",
      specialChars = "!@#$%^&*()-_=+,.?/:;{}[]~",
      characters = upperCaseChars + lowerCaseChars + numberChars + specialChars;

const wordsFile = "/usr/share/dict/words";


class Password {
    private password;

    init() {
        this.password = "";
    }

    /**
     * get returns the configured password.
     */
    get() {
        return this.password;
    }

    /**
     * set sets the given password.
     */
    set(password) {
        this.password = password;
    }

    /**
     * generate generates a password based on the given length. The caller can
     * override whether the password is considered "secure".
     */
    generate(length, secure=true) {
        for (var i = 0; i < length; i += 1) {
            this.password += characters[Random.range(0, characters.len()-1)];
        }

        if (secure) {
            if (not this.isSecure()) {
                this.generate(length, true);
            }
        }

        return Success(nil);
    }

    /**
     * sha256 returns a Result with the sha256 hash for the given password.
     */
    sha256() {
        return Success(Hashlib.sha256(this.password));
    }

    /**
     * bcrypt returns a Result with the bcrypt hash for the given password.
     */
    bcrypt() {
        return Success(Hashlib.bcrypt(this.password));
    }

    /**
     * isSecure checks if the password is "secure".
     */
    isSecure() {
        if (this.password.len() < 12) {
            return Error("password less than 12 characters");
        }

        if (not this.hasNumber()) {
            return Error("missing number character");
        }

        if (not this.hasUpper()) {
            return Error("missing uppper case character");
        }

        if (not this.hasLower()) {
            return Error("missing uppper case character");
        }

        if (not this.hasSpecialChar()) {
            return Error("missing special character");
        }

        return Success(nil);
    }

    /**
     * hasNumber checks to see if the password has a numerical
     * character.
     */
    hasNumber() {
        for (var i = 0; i < this.password.len(); i += 1) {
            const res = this.password[i].toNumber().match(
                def (result) => {return true;},
                def (error) => {return false;}
            );
            if (res) {
                return res;
            }
        }

        return false;
    }

    /**
     * hasUpper checks to see if the password has a upper
     * case letter.
     */
    hasUpper() {
        for (var i = 0; i < this.password.len(); i += 1) {
            if (upperCaseChars.contains(this.password[i])) {
                return true;
            }
        }

        return false;
    }

    /**
     * hasLower checks to see if the password has a lower
     * case letter.
     */
    hasLower() {
        for (var i = 0; i < this.password.len(); i += 1) {
            if (lowerCaseChars.contains(this.password[i])) {
                return true;
            }
        }

        return false;
    }
    /**
     * hasSpecialChar checks to see if the password has a 
     * special character.
     */
    hasSpecialChar() {
        for (var i = 0; i < this.password.len(); i += 1) {
            if (specialChars.contains(this.password[i])) {
                return true;
            }
        }

        return false;
    }

    /**
     * isDictionaryWord checks the system dictionary for the password.
     */
    private isDictionaryWord() {
        if (System.platform == "windows") {
            return Error("not supported on Windows");
        }

        with(wordsFile, "r") {
            var word;

            while((word = file.readLine()) != nil) {
                if (word == this.password) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * salt salts the configured password and returns a dictionary
     * containing the salt and the hash of the password and salt.
     */
    salt() {
        var salt = "";

        for (var i = 0; i < 64; i += 1) {
            salt += characters[Random.range(0, characters.len()-1)];
        }

        return {
            "salt": salt,
            "hash": Hashlib.sha256(salt + this.password)
        };
    }
}
